package tn.com.smartsoft.framework.presentation.view.window;

import tn.com.smartsoft.commons.exceptions.TechnicalException;
import tn.com.smartsoft.framework.presentation.UIObject;
import tn.com.smartsoft.framework.presentation.context.WebContext;
import tn.com.smartsoft.framework.presentation.view.action.UserAction;
import tn.com.smartsoft.framework.presentation.view.tags.TagHandler;
import tn.com.smartsoft.framework.presentation.view.tags.handler.GenericTagHandler;
import tn.com.smartsoft.framework.presentation.view.tags.parser.UIParseException;

public abstract class UIComponent implements UIObject {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private UIComponent parent;
	private String id;
	protected boolean generatedId = false;
	protected String tagName;

	public UIComponent() {
	}

	public UIComponent getParent() {
		return parent;
	}

	public void dettachedFromWindow() {
		this.getWindow().parserContext().dettachedFromWindow(id);
	}

	public void setParent(UIComponent parent) {
		this.parent = parent;
	}

	public UIWindow getWindow() {
		if (getParent() == null && this instanceof UIWindow)
			return (UIWindow) this;
		return getParent().getWindow();
	}

	public UserAction getUserAction() {
		UIWindow uiWindow = getWindow();
		return uiWindow.userAction();
	}

	public void addTag(TagHandler tagHandler) {
		try {
			GenericTagHandler tagHandlerParent = new GenericTagHandler(tagName);
			tagHandlerParent.addChildren(tagHandler);
			getWindow().parserContext().parse(this, tagHandlerParent);
		} catch (UIParseException e) {
			throw new TechnicalException(e);
		}
	}

	public void addTag(String tagName, String[] names, Object[] values) {
		GenericTagHandler tagHandler = new GenericTagHandler(tagName, names, values);
		addTag(tagHandler);
	}

	public void addTag(String tagName, String name0, String name1, String name2, Object value0, Object value1, Object value2) {
		GenericTagHandler tagHandler = new GenericTagHandler(tagName, name0, name1, name2, value0, value1, value2);
		addTag(tagHandler);
	}

	public void addTag(String tagName, String name0, String name1, Object value0, Object value1) {
		GenericTagHandler tagHandler = new GenericTagHandler(tagName, name0, name1, value0, value1);
		addTag(tagHandler);
	}

	public void addTag(String tagName, String name0, Object value0) {
		GenericTagHandler tagHandler = new GenericTagHandler(tagName, name0, value0);
		addTag(tagHandler);
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getId() {
		return id;
	}

	public String resolveEventPath(WebContext context, String event) {
		return getWindow().resolvePath(context, getId(), event);
	}

	public boolean isGeneratedId() {
		return generatedId;
	}

	public void setGeneratedId(boolean autoGeneratedId) {
		this.generatedId = autoGeneratedId;
	}

	public String tagName() {
		return tagName;
	}

	public void setTagName(String tagName) {
		this.tagName = tagName;
	}
}
